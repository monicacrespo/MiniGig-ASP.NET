<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    <section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="Model.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    </sectionGroup>
  </configSections>
  <!-- [BEGIN] Logging Application Block Configuration -->
  <loggingConfiguration name="Logging Application Block" tracingEnabled="true" defaultCategory="General" logWarningsWhenNoCategoriesMatch="true">
    <listeners>
      <add fileName="S:\Log\MiniVenue.log" header="" footer="" formatter="" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="FlatFile TraceListener" />
      <add source="Enterprise Library Logging" formatter="Text Formatter" log="Application" machineName="" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" traceOutputOptions="None" filter="All" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Formatted EventLog TraceListener" />
    </listeners>
    <formatters>
      <add template="[{timestamp}] [{category}] ({severity}) - {message} " type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="Text Formatter" />
    </formatters>
    <categorySources>
      <add switchValue="All" name="General">
        <listeners>
          <add name="Formatted EventLog TraceListener" />
          <add name="FlatFile TraceListener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events" />
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="Formatted EventLog TraceListener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <!-- [END] Logging Application Block Configuration -->
  <applicationSettings>
    <Model.Properties.Settings>
      <setting name="GigDAOFactory_daoClassName" serializeAs="String">
        <value>Model.Gig.DAO.GigDAO</value>
      </setting>
      <setting name="GigServiceFactory_daoClassName" serializeAs="String">
        <value>Model.GigFacade.GigService</value>
      </setting>
      <setting name="DAOFactory_connectionString" serializeAs="String">
        <value>Data Source=.\SQLExpress; Initial Catalog=MiniGig; User ID=user2; Password=user2</value>
      </setting>
      <setting name="LogManager_FileLocation" serializeAs="String">
        <value>S:\\Log</value>
      </setting>
      <setting name="LogManager_FilePartialName" serializeAs="String">
        <value>log</value>
      </setting>
      <setting name="LogManager_FileExtension" serializeAs="String">
        <value>txt</value>
      </setting>
      <setting name="LogManager_SecurityLevel" serializeAs="String">
        <value>3</value>
      </setting>
      <setting name="LogManager_LogDestination" serializeAs="String">
        <value>ALL</value>
      </setting>
    </Model.Properties.Settings>
  </applicationSettings>
 

  <!-- Unity Configuration Block -->
  <unity>
    <typeAliases>
      <!-- <typeAlias alias="aliasName" type="Class FullName, Assembly Name" /> -->
      <typeAlias alias="GigService" type="Model.GigFacade.GigService, Model" />
      <typeAlias alias="IGigService" type="Model.GigFacade.IGigService, Model" />
      <typeAlias alias="GigDaoEntityFramework" type="Model.GigDao.GigDaoEntityFramework, Model" />
      <typeAlias alias="IGigDao" type="Model.GigDao.IGigDao, Model" />
      <typeAlias alias="InterfaceInterceptor" type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="ObjectContext" type="System.Data.Objects.ObjectContext, System.Data.Entity" />
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
    </typeAliases>
    <containers>
      <container>
        <types>
          <!-- ************   Mappings for Bussiness Objects ************* -->
          <!-- Object Context -->
          <type type="System.Data.Objects.ObjectContext, System.Data.Entity" mapTo="System.Data.Objects.ObjectContext, System.Data.Entity">
            <lifetime type="singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="connectionString" parameterType="System.String">
                  <value value="metadata=res://*/MiniGigEntitiesModel.csdl|res://*/MiniGigEntitiesModel.ssdl|res://*/MiniGigEntitiesModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=.\SQLEXPRESS;initial catalog=MiniGig;integrated security=True;multipleactiveresultsets=True;App=EntityFramework&quot;" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IGigService" mapTo="GigService"></type>
          <type type="IGigDao" mapTo="GigDaoEntityFramework"></type>
        </types>
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <!-- Interception schema for transactional methods -->
        <extensionConfig>
          <add name="TransactionalIntercepcion" type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <interceptors>
              <interceptor type="InterfaceInterceptor">
                <key type="IGigService" />
              </interceptor>
            </interceptors>
          </add>
        </extensionConfig>
      </container>
    </containers>
  </unity>
<connectionStrings>
<add name="MiniGigEntities" connectionString="metadata=res://*/MiniGigEntitiesModel.csdl|res://*/MiniGigEntitiesModel.ssdl|res://*/MiniGigEntitiesModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=.\SQLEXPRESS;Initial Catalog=MiniGig;Integrated Security=True;MultipleActiveResultSets=True;Application Name=EntityFramework&quot;" providerName="System.Data.EntityClient" /></connectionStrings>
</configuration>